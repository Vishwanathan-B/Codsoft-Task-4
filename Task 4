/*My INTERNSHIP TASK 4*/



#include <iostream>
#include <vector>
#include <string>

using namespace std;

class Task {
public:
    string description;
    bool isCompleted;

    Task(const string& desc) : description(desc), isCompleted(false) {}
};

class ToDoList {
private:
    vector<Task> tasks;

public:
    void addTask(const string& task) {
        tasks.push_back(Task(task));
        cout << "Task added: " << task << endl;
    }

    void viewTasks() const {
        if (tasks.empty()) {
            cout << "No tasks to show." << endl;
        } else {
            cout << "Tasks:" << endl;
            for (size_t i = 0; i < tasks.size(); ++i) {
                cout << i + 1 << ". " << tasks[i].description 
                     << " [" << (tasks[i].isCompleted ? "Completed" : "Pending") << "]" << endl;
            }
        }
    }

    void markTaskCompleted(int index) {
        if (index < 1 || index > tasks.size()) {
            cout << "Invalid task number." << endl;
        } else {
            tasks[index - 1].isCompleted = true;
            cout << "Task marked as completed: " << tasks[index - 1].description << endl;
        }
    }

    void deleteTask(int index) {
        if (index < 1 || index > tasks.size()) {
            cout << "Invalid task number." << endl;
        } else {
            cout << "Task deleted: " << tasks[index - 1].description << endl;
            tasks.erase(tasks.begin() + index - 1);
        }
    }
};

int main() {
    ToDoList toDoList;
    int choice;
    string task;
    int taskNumber;

    do {
        cout << "\nTo-Do List Manager\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Delete Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Enter task description: ";
                cin.ignore(); // To ignore the newline character left in the input buffer
                getline(cin, task);
                toDoList.addTask(task);
                break;
            case 2:
                toDoList.viewTasks();
                break;
            case 3:
                cout << "Enter task number to mark as completed: ";
                cin >> taskNumber;
                toDoList.markTaskCompleted(taskNumber);
                break;
            case 4:
                cout << "Enter task number to delete: ";
                cin >> taskNumber;
                toDoList.deleteTask(taskNumber);
                break;
            case 5:
                cout << "Exiting the To-Do List Manager. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
                break;
        }
    } while (choice != 5);

    return 0;
}
   
